{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Abdhi\\\\OneDrive\\\\Desktop\\\\app\\\\AI Train Traffic Control System\\\\frontend\\\\src\\\\components\\\\TrainList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport axios from 'axios';\nimport mapboxgl from 'mapbox-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\n// You need to replace this with your actual Mapbox access token\n// Do not hardcode this in a public repository. Use environment variables.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmapboxgl.accessToken = 'YOUR_MAPBOX_ACCESS_TOKEN';\nexport default function TrackMap() {\n  _s();\n  const mapContainerRef = useRef(null);\n  const map = useRef(null);\n  const [tracks, setTracks] = useState([]);\n  const [trains, setTrains] = useState([]);\n  useEffect(() => {\n    // Initialize map\n    if (map.current) return;\n    map.current = new mapboxgl.Map({\n      container: mapContainerRef.current,\n      style: 'mapbox://styles/mapbox/light-v10',\n      center: [78.6569, 11.2319],\n      // Initial center (e.g., a location in India)\n      zoom: 5\n    });\n    map.current.on('load', () => {\n      // Add a GeoJSON source for the tracks\n      map.current.addSource('tracks-data', {\n        type: 'geojson',\n        data: {\n          type: 'FeatureCollection',\n          features: []\n        }\n      });\n\n      // Add a line layer for the tracks\n      map.current.addLayer({\n        id: 'tracks-layer',\n        type: 'line',\n        source: 'tracks-data',\n        paint: {\n          'line-color': ['case', ['>', ['get', 'currentOccupancy'], 0], '#FF0000',\n          // Red for occupied\n          '#008000' // Green for unoccupied\n          ],\n          'line-width': 4\n        }\n      });\n\n      // Add a GeoJSON source for the trains\n      map.current.addSource('trains-data', {\n        type: 'geojson',\n        data: {\n          type: 'FeatureCollection',\n          features: []\n        }\n      });\n\n      // Add a symbol layer for the trains\n      map.current.addLayer({\n        id: 'trains-layer',\n        type: 'symbol',\n        source: 'trains-data',\n        layout: {\n          'icon-image': 'rail-light',\n          // A built-in Mapbox icon for railways\n          'icon-allow-overlap': true\n        }\n      });\n    });\n\n    // Cleanup on component unmount\n    return () => map.current.remove();\n  }, []);\n  useEffect(() => {\n    const fetchMapData = async () => {\n      try {\n        const [tracksRes, trainsRes] = await Promise.all([axios.get('http://localhost:5000/api/tracks'), axios.get('http://localhost:5000/api/trains')]);\n        setTracks(tracksRes.data);\n        setTrains(trainsRes.data);\n      } catch (err) {\n        console.error(\"Failed to fetch map data:\", err);\n      }\n    };\n\n    // Fetch data on initial load and every 5 seconds\n    fetchMapData();\n    const interval = setInterval(fetchMapData, 5000);\n    return () => clearInterval(interval);\n  }, []);\n  useEffect(() => {\n    if (!map.current || !map.current.isStyleLoaded()) return;\n\n    // Update track data source\n    const trackFeatures = tracks.map(track => ({\n      type: 'Feature',\n      geometry: {\n        type: 'LineString',\n        coordinates: [[track.startLocation.longitude, track.startLocation.latitude], [track.endLocation.longitude, track.endLocation.latitude]]\n      },\n      properties: {\n        sectionId: track.sectionId,\n        currentOccupancy: track.currentOccupancy\n      }\n    }));\n    map.current.getSource('tracks-data').setData({\n      type: 'FeatureCollection',\n      features: trackFeatures\n    });\n\n    // Update train data source\n    const trainFeatures = trains.filter(train => train.currentLocation && train.currentLocation.latitude !== 0).map(train => ({\n      type: 'Feature',\n      geometry: {\n        type: 'Point',\n        coordinates: [train.currentLocation.longitude, train.currentLocation.latitude]\n      },\n      properties: {\n        title: train.name,\n        status: train.status\n      }\n    }));\n    map.current.getSource('trains-data').setData({\n      type: 'FeatureCollection',\n      features: trainFeatures\n    });\n  }, [tracks, trains]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-bold mb-4\",\n      children: \"Live Railway Map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapContainerRef,\n      className: \"w-full h-[600px] rounded-2xl shadow-lg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n}\n_s(TrackMap, \"LqgdHMbPG1Me3WAa4fGESkUglz0=\");\n_c = TrackMap;\nvar _c;\n$RefreshReg$(_c, \"TrackMap\");","map":{"version":3,"names":["React","useEffect","useRef","useState","axios","mapboxgl","jsxDEV","_jsxDEV","accessToken","TrackMap","_s","mapContainerRef","map","tracks","setTracks","trains","setTrains","current","Map","container","style","center","zoom","on","addSource","type","data","features","addLayer","id","source","paint","layout","remove","fetchMapData","tracksRes","trainsRes","Promise","all","get","err","console","error","interval","setInterval","clearInterval","isStyleLoaded","trackFeatures","track","geometry","coordinates","startLocation","longitude","latitude","endLocation","properties","sectionId","currentOccupancy","getSource","setData","trainFeatures","filter","train","currentLocation","title","name","status","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["C:/Users/Abdhi/OneDrive/Desktop/app/AI Train Traffic Control System/frontend/src/components/TrainList.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport axios from 'axios';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\n\r\n// You need to replace this with your actual Mapbox access token\r\n// Do not hardcode this in a public repository. Use environment variables.\r\nmapboxgl.accessToken = 'YOUR_MAPBOX_ACCESS_TOKEN';\r\n\r\nexport default function TrackMap() {\r\n  const mapContainerRef = useRef(null);\r\n  const map = useRef(null);\r\n  const [tracks, setTracks] = useState([]);\r\n  const [trains, setTrains] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Initialize map\r\n    if (map.current) return;\r\n    map.current = new mapboxgl.Map({\r\n      container: mapContainerRef.current,\r\n      style: 'mapbox://styles/mapbox/light-v10',\r\n      center: [78.6569, 11.2319], // Initial center (e.g., a location in India)\r\n      zoom: 5\r\n    });\r\n\r\n    map.current.on('load', () => {\r\n      // Add a GeoJSON source for the tracks\r\n      map.current.addSource('tracks-data', {\r\n        type: 'geojson',\r\n        data: {\r\n          type: 'FeatureCollection',\r\n          features: []\r\n        }\r\n      });\r\n\r\n      // Add a line layer for the tracks\r\n      map.current.addLayer({\r\n        id: 'tracks-layer',\r\n        type: 'line',\r\n        source: 'tracks-data',\r\n        paint: {\r\n          'line-color': [\r\n            'case',\r\n            ['>', ['get', 'currentOccupancy'], 0], '#FF0000', // Red for occupied\r\n            '#008000' // Green for unoccupied\r\n          ],\r\n          'line-width': 4\r\n        }\r\n      });\r\n      \r\n      // Add a GeoJSON source for the trains\r\n      map.current.addSource('trains-data', {\r\n        type: 'geojson',\r\n        data: {\r\n          type: 'FeatureCollection',\r\n          features: []\r\n        }\r\n      });\r\n\r\n      // Add a symbol layer for the trains\r\n      map.current.addLayer({\r\n        id: 'trains-layer',\r\n        type: 'symbol',\r\n        source: 'trains-data',\r\n        layout: {\r\n          'icon-image': 'rail-light', // A built-in Mapbox icon for railways\r\n          'icon-allow-overlap': true\r\n        }\r\n      });\r\n    });\r\n    \r\n    // Cleanup on component unmount\r\n    return () => map.current.remove();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchMapData = async () => {\r\n      try {\r\n        const [tracksRes, trainsRes] = await Promise.all([\r\n          axios.get('http://localhost:5000/api/tracks'),\r\n          axios.get('http://localhost:5000/api/trains')\r\n        ]);\r\n        setTracks(tracksRes.data);\r\n        setTrains(trainsRes.data);\r\n      } catch (err) {\r\n        console.error(\"Failed to fetch map data:\", err);\r\n      }\r\n    };\r\n    \r\n    // Fetch data on initial load and every 5 seconds\r\n    fetchMapData();\r\n    const interval = setInterval(fetchMapData, 5000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!map.current || !map.current.isStyleLoaded()) return;\r\n\r\n    // Update track data source\r\n    const trackFeatures = tracks.map(track => ({\r\n      type: 'Feature',\r\n      geometry: {\r\n        type: 'LineString',\r\n        coordinates: [\r\n          [track.startLocation.longitude, track.startLocation.latitude],\r\n          [track.endLocation.longitude, track.endLocation.latitude]\r\n        ]\r\n      },\r\n      properties: {\r\n        sectionId: track.sectionId,\r\n        currentOccupancy: track.currentOccupancy\r\n      }\r\n    }));\r\n    map.current.getSource('tracks-data').setData({\r\n      type: 'FeatureCollection',\r\n      features: trackFeatures\r\n    });\r\n    \r\n    // Update train data source\r\n    const trainFeatures = trains\r\n      .filter(train => train.currentLocation && train.currentLocation.latitude !== 0)\r\n      .map(train => ({\r\n        type: 'Feature',\r\n        geometry: {\r\n          type: 'Point',\r\n          coordinates: [train.currentLocation.longitude, train.currentLocation.latitude]\r\n        },\r\n        properties: {\r\n          title: train.name,\r\n          status: train.status\r\n        }\r\n      }));\r\n    map.current.getSource('trains-data').setData({\r\n      type: 'FeatureCollection',\r\n      features: trainFeatures\r\n    });\r\n  }, [tracks, trains]);\r\n\r\n  return (\r\n    <div className=\"p-6\">\r\n      <h2 className=\"text-xl font-bold mb-4\">Live Railway Map</h2>\r\n      <div ref={mapContainerRef} className=\"w-full h-[600px] rounded-2xl shadow-lg\" />\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}